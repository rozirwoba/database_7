===================[TUGAS 6.1]===================

1.	Buatlah Procedure untuk mengupdate harga_jual berdasarkan jenis produk tertentu (jenis_produk_id), beri nama procedure pro_naikan_harga memiliki parameter yang akan menerima argumen: Jenis Produk ID dan Persentase kenaikan harga.

    CREATE PROCEDURE ...
    DELIMITER $$
    CREATE PROCEDURE pro_naik(
        IN jenis_produk INT,
        IN persentasi_kenaikan INT )
        BEGIN
        UPDATE produk SET harga_jual = harga_jual + (harga_jual * persentasi_kenaikan / 100)
        WHERE jenis_produk_id = jenis_produk;
        END $$
    DELIMITER ;
    CALL pro_naik(1,4);
    CREATE PROCEDURE pro_naikan_harga



2.	Buat fungsi umur dengan parameter yang menerima inputan argumen tipe data date dan mengembalikan hasil perhitungan umur (tahun sekarang dikurang tahun inputan) dengan tipe data bilangan bulat (integer) positif.

    CREATE FUNCTION ...
    CREATE FUNCTION umur(tgl_lahir DATE)
        RETURNS INT
        BEGIN
        DECLARE umur INT;
        SET umur = YEAR(CURDATE()) - YEAR(tgl_lahir);
        RETURN umur;
    END $$
    SELECT nama, umur(tgl_lahir) AS umur FROM pelanggan;



3.	Buat fungsi kategori_harga dengan parameter yang menerima inputan argument tipe data double dan mengembalikan tipe data string kategori harga berdasarkan: 
    ●	0 – 500rb : murah
    ●	500rb – 3 juta : sedang
    ●	3jt – 10 juta : mahal 
    ●	> 10 juta : sangat mahal

    DELIMITER $$
    CREATE PROCEDURE kategori_harga(harga INT)
    BEGIN
        DECLARE kategori VARCHAR(20);
        IF harga >= 0 AND harga <= 500000 THEN
            SET kategori = 'Murah';
        ELSEIF harga > 500000 AND harga <= 3000000 THEN
            SET kategori = 'Sedang';
        ELSEIF harga > 3000000 AND harga <= 10000000 THEN
            SET kategori = 'Mahal';
        ELSE
            SET kategori = 'Sangat Mahal';
        END IF;
        SELECT kategori AS 'Kategori Harga';
    END $$
    DELIMITER ;

    CALL kategori_harga(450000);



===================[TUGAS 6.2]===================
1.	Buatlah bisnis proses pembayaran dengan menggunakan trigers, dengan skenario sebagai berikut :
    - pelanggan memesan didalam table pesanan 
    - dilanjutkan dengan proses pembayaran di table pembayaran
    - didalam table pembayaran tambahkan kolom status_pembayaran
    - jika pesanan sudah dibayar maka status pembayaran akan berubah menjadi lunas 

    1.	Pelanggan memesan didalam table pesanan
        SELECT * FROM pesanan;

    2.	Dilanjutkan dengan proses pembayaran di table pembayaran
        DELIMITER $$
        CREATE TRIGGER cek_pembayaran BEFORE INSERT ON pembayaran
        FOR EACH ROW
        BEGIN
        DECLARE total_bayar DECIMAL(10, 2);
        DECLARE total_pesanan DECIMAL(10, 2);
        SELECT SUM(jumlah) INTO total_bayar FROM pembayaran WHERE pesanan_id = NEW.pesanan_id;
        SELECT total INTO total_pesanan FROM pesanan WHERE id = NEW.pesanan_id;

    3.	Didalam table pembayaran tambahkan kolom status_pembayaran
        ALTER TABLE pembayaran ADD status_pembayaran varchar(25);

    4.	Jika pesanan sudah dibayar maka status pembayaran akan berubah menjadi lunas
        IF total_bayar + NEW.jumlah >= total_pesanan THEN
        SET NEW.status_pembayaran = 'Lunas';
        END IF;
        END $$
        DELIMITER ;

        // Menambahkan data pada tabel pembayaran
        INSERT INTO pembayaran (no_kuitansi, tanggal, jumlah, ke, pesanan_id, status_pembayaran)
        VALUES ('KWI001', '2023-03-03', 200000, 1, 1);


2.	Buatlah Stored Procedure dengan nama kurangi_stok untuk mengurangi stok produk. Stok berkurang sesuai dengan jumlah pesanan produk.
    DELIMITER $$
    CREATE PROCEDURE kurangi_stok(IN produk_id INT, IN jumlah_pesanan INT)
    BEGIN
    DECLARE stok_produk INT;
    
    -- Dapatkan jumlah stok produk saat ini
    SELECT stok INTO stok_produk FROM produk WHERE id = produk_id;
    
    -- Kurangi stok dengan jumlah pesanan
    SET stok_produk = stok_produk - jumlah_pesanan;
    
    -- Pastikan stok tidak negatif
    IF stok_produk < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Stok produk tidak mencukupi';
    END IF;
    
    -- Update stok produk yang telah dikurangi
    UPDATE produk SET stok = stok_produk WHERE id = produk_id;
    END $$
    DELIMITER ;


3.	Buatlah Trigger dengan nama trig_kurangi_stok yang akan mengurangi stok produk jika terjadi transaksi pesanan oleh pelanggan (memanggil stored procedure kurangi_stok soal no 1).
Trigger ini aktif setelah trigger after_pesanan_items_insert (trigger pada contoh 3).
    CREATE TRIGGER ...
    DELIMITER $$
    CREATE TRIGGER trig_kurangi_stok AFTER INSERT ON pesanan_items
    FOR EACH ROW
    BEGIN
    -- Memanggil stored procedure kurangi_stok untuk mengurangi stok produk
    CALL kurangi_stok(NEW.produk_id, NEW.qty);
    END $$
    DELIMITER ;

    SELECT * FROM `produk`

    INSERT INTO pesanan_items (produk_id, pesanan_id, qty, harga) VALUES 
    (7, 3, 2, 7000)

    SELECT * FROM `produk`